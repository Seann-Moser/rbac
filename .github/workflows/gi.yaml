# This workflow name will appear on GitHub in the "Actions" tab.
name: Go CI

# This specifies when the workflow should run.
on:
  # Triggers the workflow on push events to the 'main' branch.
  push:
    branches:
      - main
  # Triggers the workflow on pull request events to the 'main' branch.
  pull_request:
    branches:
      - main

# Define the jobs that will run as part of this workflow.
jobs:
  build-and-test:
    # Specifies the runner environment for this job.
    runs-on: ubuntu-latest

    # Steps define a sequence of tasks that will be executed.
    steps:
      # Step 1: Checkout the repository code.
      # This action checks out your repository under $GITHUB_WORKSPACE,
      # so your workflow can access it.
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up the Go environment.
      # This action sets up a Go environment and caches Go modules.
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          # Specify the Go version. You can change this to your desired version.
          go-version: '1.22'
          # Enable caching of Go modules to speed up subsequent runs.
          cache: true

      # Step 3: Download Go modules.
      # This step ensures all dependencies are downloaded before building or testing.
      - name: Download Go modules
        run: go mod download

      # Step 4: Run Go tests.
      # This command runs all tests in your package.
      # '-v' (verbose) shows detailed output for each test.
      # './...' recursively finds and runs tests in all subdirectories.
      - name: Run Go tests
        run: go test -v ./...

      # Step 5: (Optional) Run Go linting.
      # This step uses 'golangci-lint' for code quality checks.
      # You'll need to add a '.golangci.yml' config file in your repo for this to work effectively.
      # Install golangci-lint - Removed explicit version to let the installer pick the latest compatible version.
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6 # Use the latest stable version
        with:
          # Optional: specify a specific version of golangci-lint to use.
          # If not specified, the action will try to determine the latest compatible version.
          # version: v1.59.1 # Uncomment and change if you need a specific version

          # Optional: specify the path to the .golangci.yml config file.
          # config: path/to/.golangci.yml

          # Optional: only run against modified files (faster for PRs).
          # issues-exit-code: 1 # Default is 1

          # Optional: run linter against all Go files in the repository.
          # The default is to run on files changed in the pull request.
          args: --verbose ./...

  # New job: Release (tagging)
  # New job: Release (tagging)
  # New job: Release (tagging)
  release:
    # This job only runs if the 'build-and-test' job succeeds.
    needs: build-and-test
    # This job only runs on pushes to the 'main' branch.
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      # Grant write permission to the GITHUB_TOKEN to create tags.
      contents: write

    steps:
      - name: Checkout code
        # Fetch all history and tags to correctly determine the next version.
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Important: fetch all history for proper tag detection

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      # Modified: Using a shell script to get the next semantic version
      - name: Get next semantic version
        id: tag
        run: |
          # Fetch all tags to ensure we have the complete history
          git fetch --tags --force
          
          # Get the latest semantic version tag (vX.Y.Z format).
          # This sorts tags semantically and picks the top one matching vX.Y.Z.
          # If no such tag exists, it defaults to v0.0.0 to start from.
          latest_tag=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1)
          
          # If no semantic tag is found, initialize with v0.0.0
          if [ -z "$latest_tag" ]; then
            latest_tag="v0.0.0"
          fi
          
          echo "Latest tag found: $latest_tag"
          
          # Remove 'v' prefix for parsing
          version_string=$(echo "$latest_tag" | sed 's/^v//')
          
          # Extract major, minor, and patch parts using 'cut'.
          # We explicitly take only the first three parts to ensure standard semantic versioning.
          major=$(echo "$version_string" | cut -d'.' -f1)
          minor=$(echo "$version_string" | cut -d'.' -f2)
          patch=$(echo "$version_string" | cut -d'.' -f3)

          # Ensure parts are treated as integers, defaulting to 0 if empty
          major=${major:-0}
          minor=${minor:-0}
          patch=${patch:-0}
          
          # Increment the patch version.
          new_patch=$((patch + 1))
          
          # Form the new tag with a 'v' prefix and standard X.Y.Z format.
          new_tag="v${major}.${minor}.${new_patch}"
          
          echo "Determined next tag: $new_tag"
          # Set the output variable 'tag' for subsequent steps.
          echo "tag=$new_tag" >> "$GITHUB_OUTPUT"

      - name: Create and push tag
        # This step only runs if a new version tag was generated by the previous step.
        if: steps.tag.outputs.tag != ''
        run: |
          # Configure Git user for the commit/tag. These details are used in the tag creation.
          git config user.name github-actions
          git config user.email github-actions@github.com
          # Create the new tag locally.
          git tag ${{ steps.tag.outputs.tag }}
          # Push the newly created tag to the remote repository.
          git push origin ${{ steps.tag.outputs.tag }}
          echo "Created and pushed tag: ${{ steps.tag.outputs.tag }}"
